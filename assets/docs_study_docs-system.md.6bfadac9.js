import{_ as e,o as l,c as t,a as i}from"./app.3a9b9990.js";const m=JSON.parse('{"title":"Documents system","description":"","frontmatter":{},"headers":[{"level":2,"title":"技术文档系统搭建","slug":"技术文档系统搭建","link":"#技术文档系统搭建","children":[]},{"level":2,"title":"文档驱动开发","slug":"文档驱动开发","link":"#文档驱动开发","children":[]}],"relativePath":"docs/study/docs-system.md","lastUpdated":1706771416000}'),s={name:"docs/study/docs-system.md"},a=i('<h1 id="documents-system" tabindex="-1">Documents system <a class="header-anchor" href="#documents-system" aria-hidden="true">#</a></h1><p>一个好用的技术文档系统，不单单方便文档查阅者、以及还要方便文档编写者。</p><p>文档系统的搭建，不仅仅要从这两个角度同时出发，同时还要具有一定的开发与设计能力。</p><blockquote><p>从文档编写者的角度</p></blockquote><ul><li>不需要太过于关心导航结构</li><li>提供多种辅助文档开发的工作</li><li>不需要编写数据源、更新日期、贡献者</li><li>不需要关心文档编译部分</li></ul><blockquote><p>从文档查阅者的角度</p></blockquote><ul><li>良好的导航结构，方便查阅类型</li><li>能够查看 Api 的 Type Declarations</li><li>存在真实案例、代码块、可复制代码</li><li>能有明确的数据源（git file 地址）</li><li>能有明确的更新日期、贡献人</li><li>能够查看历史版本、更新日志</li><li>良好的阅读体验、写作风格（<a href="https://zh-style-guide.readthedocs.io/zh_CN/latest/%E8%AF%AD%E8%A8%80%E9%A3%8E%E6%A0%BC/%E7%AE%80%E6%B4%81%E6%B8%85%E6%99%B0.html" target="_blank" rel="noreferrer">中文技术文档写作风格指南</a>）</li></ul><h2 id="技术文档系统搭建" tabindex="-1">技术文档系统搭建 <a class="header-anchor" href="#技术文档系统搭建" aria-hidden="true">#</a></h2><p>既要满足文档查阅者的需求、还要满足编写者的需求是技术文档系统搭建围绕的中心。</p><p>即包含一下内容，但又不局限于以下内容：</p><ul><li>Documents 文档收集组合部分</li><li>Type Declarations 自动生成</li><li>Markdown 引用 Demo 组件</li><li>历史版本文档组成部分</li><li>生成更新时间、日志、文件源</li><li>Documents 的开发命令和打包 <blockquote><p>文档编译工具(cherry-doc、vitepress、博客园、vuepress、hexo)</p></blockquote></li><li>自动化 CI 文档部署 <blockquote><p>gitlab ci、github actions、jenkins</p></blockquote></li></ul><h2 id="文档驱动开发" tabindex="-1">文档驱动开发 <a class="header-anchor" href="#文档驱动开发" aria-hidden="true">#</a></h2><p>「代码未动，文档先行」这可以说是文档驱动API设计的核心了，在开始编写API代码之前，先将API设计好，然后输出成API文档。</p><p>在设计的过程中，实际上是对API细节的梳理，一个功能或者一组功能，需要用到哪些API，这些API都需要哪些请求参数和返回参数。当你将这些API输出成文档后，基本上大致的结构已经确定下来，不像之前只是脑子里有个粗糙的构思。</p><p>接下来的事情就是和API相关的开发者和调用者进行文档的评审，和大家一起确认这些API是否都合理，看有没有遗漏的，同时也是让相关人员都清楚各系统模块间的调用逻辑。当文档评审通过后，代表大家对API的设计达成了统一，这时候每个人就可以按照文档开始各自的工作了。</p>',15),o=[a];function c(r,d,n,p,u,h){return l(),t("div",null,o)}const A=e(s,[["render",c]]);export{m as __pageData,A as default};
